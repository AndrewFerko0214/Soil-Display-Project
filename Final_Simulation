
# -*- coding: utf-8 -*-
"""
Created on Tue Apr  9 19:32:45 2019

@author: SFU
"""
import numpy as np
from numba import jit
import matplotlib.pyplot as plt
from scipy import interpolate


"""lines 7-121 define the formulas used to calculate head in different situations
based on locations of nearest neighboring blocks. Each node is labeled for the 
situation in which it should be used. Nodes are included for material change, 
constant head, corners, top boundaries, bottom boundaries, interior boundaries,
hydraulic conductivity changes, and flux"""

def Node_Selection(i,j,Node,h,k,qx,qy,deltax,deltay):
    
   # Material change only works for inside boundaries
    if Node ==0:
        h_n = (h[i+1,j] +h[i-1,j] + h[i,j+1]+ h[i,j-1])/4
   

    # Bottom Boundary no flux
    elif Node == 10:
        h_n = (h[i+1,j] + h[i-1,j] + 2*h[i,j+1])/4
    
    # Top Boundary no flux
    elif Node == 20:
        h_n = (h[i+1,j] + h[i-1,j] + 2*h[i,j-1])/4
    
    
    # Left Boundary no flux
    elif Node == 30:
      h_n = (h[i,j+1] + h[i,j-1]+ 2*h[i+1,j])/4
        
       # Right Boundary no flux 
    elif Node == 40:
        h_n = (h[i,j+1] + h[i,j-1]+ 2*h[i-1,j])/4
    
    
    #Interior Corner no flux
    elif Node == 50:
        h_n = (2*h[i+1,j]+ 2*h[i,j+1])/4
    
    
    # Exterior bottom right corner no flux 4 different
    elif Node == 60:
        h_n = (2*h[i-1,j] + 2*h[i,j+1])/4
        
    # Exterior corner bottom left no flux
    elif Node == 70:
        h_n = (2*h[i+1,j]+2*h[i,j+1])/4
        
    #Exterior top right corner no flux
    elif Node == 80:
        h_n = (2*h[i-1,j] + 2*h[i,j-1])/4
        
    
    #Exterior top left corner
    elif Node == 90:
        h_n = (2*h[i+1,j] + 2*h[i,j-1])/4
    
    
    # Bottom Boundary material change Inside domain
    elif Node == 13:
        h_barT = (k[i,j+1]*h[i,j+1] + k[i,j-1]*h[i,j-1])/(k[i,j+1] + k[i,j-1])
        h_n = (2*h_barT + h[i,j+1] + h[i,j-1])/4
    
    
    
    # Left Boundary material change inside domain
    elif Node == 33:
        h_bar_sides = (k[i+1,j]*h[i+1,j] + k[i-1,j]*h[i-1,j])/(k[i+1,j]+k[i-1,j])
        h_n = (2*h_bar_sides + h[i+1,j] + h[i-1,j])/4
    
    
    #Left boundary fixed flux
    elif Node == 31:
        h_n = (2*h[i+1,j] - 2*deltax*(qx/k[i,j]) + h[i,j+1] + h[i,j-1])/4
   
     #Top Boundary fixed flux
    elif Node == 21:
        h_n =  (2*h[i,j-1] - 2*deltay*(qy/k[i,j]) + h[i+1,j] + h[i-1,j])/4
    
    
    #Bottom Boundary fixed Flux
    elif Node == 11:
        h_n = (2*h[i,j+1] - 2*deltay*(qy/k[i,j]) + h[i+1,j] + h[i-1,j])/4
    
    
    
    # Right Boundary fixed flux
    elif Node == 41:
        h_n = (2*h[i-1,j] - 2*deltax*(qx/-k[i,j]) + h[i,j+1] + h[i,j-1])/4
   
    
    
   #Bottom Boundary constant head
    elif Node == 12:
        h_n = h[i,j]
    
    
    #Top Boundary constant head
    elif Node == 22:
        h_n= h[i,j]
    
    
    #Left Boundary constant head
    elif Node == 32:
        h_n = h[i,j]
    
    
    #Right Boundary constant head
    elif Node == 42:
        h_n = h[i,j]
        
    
    #Interior corner constant head
    elif Node == 52:
        h_n = h[i,j]

    # Exterior corner constant head
    elif Node == 62:
        h_n = h[i,j]
    
    ## Bandstras code for hydraulic conductivity for project
    elif Node == 444:
        h_nA = 2*((k[i-1,j]*h[i-1,j] + k[i+1,j]*h[i+1,j])/(k[i-1,j]+k[i+1,j]))
        h_nB = 2*((k[i,j+1]*h[i,j+1]+k[i,j-1]*h[i,j-1])/(k[i,j+1]+k[i,j-1]))
        h_n = (h_nA + h_nB) / 4
        
    elif Node == 24:
         # no flux top
        h_n = (h[i+1,j] + h[i-1,j] + 2*h[i,j-1])/4
    elif Node ==3:
        # no flux corner, interior
        h_n = (h[i+1,j] + h[i,j-1])/2
    elif Node ==4:
        # no flux corner, interior
        h_n = (h[i-1,j] + h[i,j-1])/2
    else:
        h_n = -99
    return h_n

"""Lines 134-153 are the gausian solver used to calculate head at each point as 
a function of the node selected in the code above. This process is expidited and 
compiled by numba jit"""

@jit
def GaussSiedel_NoLowerFlux(T,Node,tol):
    err = tol + 1
    iters = 0
    lam = 1.5
    Nx, Ny = np.shape(T)
    while err > tol:
        err = 0
        iters += 1
        for j in range(0,Ny):
            for i in range(0,Nx):
                T_o = T[i,j]
                # nearest neighbor avg assumes dx = dy
                T_n = Node_Selection(i,j,Node[i,j],h,k,qx[i,j],qy[i,j],deltax,deltay)
                # over relaxation
                T_n = lam*T_n + (1-lam)*T_o
                err = max(err, abs(T_o - T_n))
                T[i,j] = T_n
    return T, iters





"""lines 158-169 interact with the user interface located in Microsoft Excel.
The user inputs the parameters such as size, and hydraulic conductivity for 
the desired system. A pandas module imports the data from excel and transposes
it into arrays so that it can be manipulated in python"""

import pandas as pd
data = pd.read_excel(r'C:\Users\SFU\Documents\junior year spring\Mod and Sim\user_interface11.xlsx', sheet_name='user')
L = np.transpose(np.array(data))
Nx = np.shape(L)[0]
Ny = np.shape(L)[1]
Inputs = pd.read_excel(r'C:\Users\SFU\Documents\junior year spring\Mod and Sim\user_interface11.xlsx', sheet_name='flux')
Inputs1 = np.transpose(np.array(Inputs))
qx1 = Inputs1[0,:]
qy1 = Inputs1[1,:]
K1 = Inputs1[2,:]
K2 = Inputs1[3,:]
K3 = Inputs1[4,:]




"""lines 177-193 define the node(N), hydraulic conductivity(k), and flux (qx,qy)
arrays needs to store the data from the gausian solver. These arrays are a multiple
of the user interface so that more points can be used to improve accuracy"""
k = np.zeros((8*Nx,8*Ny),dtype = 'float')
for j in range(0,Ny):
    for i in range(0,Nx):
        if L[i,j] == 1:
            k[8*i:8*(i+1),8*j:8*(j+1)] = K1
        if L[i,j] == 2:
            k[8*i:8*(i+1),8*j:8*(j+1)]= K2
        if L[i,j] == 3:
           k[8*i:8*(i+1),8*j:8*(j+1)] = K3

N = np.zeros_like((k),dtype=int)
h = np.ones_like(N, dtype='float')*100
h[1:50,:] = 10
h[51:100,:] = 25
h[101:150,:] = 50
h[151:200,:] = 75

qy = np.ones_like(N) *qy1
qx = np.ones_like(N) * qx1
deltax = 1
deltay= 1



"""lines 203-326 define what nodes will be used to calculate head 
with the gausian solver. A defined area of the display is set equal 
to a node in the above section. A guess at the free surface is made."""
#boundaries and internal nodes
N[:,0] = 10
N[:,-1] = 20
N[0,:] = 30
N[-1,:] = 40
N[1:-1,1:-1] = 444

# water influent and effluent points on left and right


#left
N[0,1] = 32
N[0,10] = 32
N[0,20] = 32
N[0,40] = 32
N[0,60] = 32
N[0,80] = 32
N[0, 100] = 32


h[0,1] = 1
h[0,10] = 10
h[0,20] = 20
h[0,40] = 40
h[0,60] = 60
h[0,80] = 80
h[0, 100] = 100

#right
N[-1,1] = 41
N[-1,10] = 41
N[-1,20] = 41
N[-1,40] = 41
N[-1,60] = 41
N[-1,80] = 41
N[-1, 100] = 41



#Corners
N[0,0] = 70
N[0,-1] = 90
N[-1,0] = 60
N[-1,-1] = 80


# no flux nodes along the guessed free surface
N[1:10, 95] = 24 
N[10, 95] = 3
N[10, 96] = 3 
N[11:20, 96] = 24 
N[20, 96] = 3 
N[20, 97] = 3 
N[21:50, 97] = 24 
N[50, 97] = 3 
N[50, 98] = 3
N[51:100, 98] = 24 
N[100, 98] = 3 
N[100, 99] = 3 
N[101:207, 99] = 24 


N[207,99] = 32 
N[207,98] = 32 


N[0,95] = 3
N[0,94] = 3
N[207,100] = 4



"""all nodes above free surface converted to set to -1, and furtherly converted to nan"""

## set all nodes above the free surface to -1
N[1:,101:] = -1
N[:10,96] = -1
N[:20,97] = -1
N[:50,98] = -1
N[:100,99:] = -1
N[1:,100:] = -1

h[np.where(N==-1)] = np.nan #h doesn't exisit above the free surface





h[np.where(h==-99)]=0

"""run gausse siedel solver to find head"""
h,iters = GaussSiedel_NoLowerFlux(h,N,1e-2)


"""Find points at actual free surface"""

z_FS = np.zeros(208, dtype = int)
z_FS_new = np.zeros_like(z_FS, dtype = int)

def ZFS_calc(h): 
    deltaZ = 1
    h_min = np.zeros_like(h)
    for i in range(0,208):
        for j in range(0,104):
            h_min[i,j] = h[i,j] - j * deltaZ
    for i in range(207):#207
        t = h_min[i,:][~np.isnan(h_min[i,:])]
        z = np.arange(len(t))
        f = interpolate.interp1d(t,z, fill_value='extrapolate')
        z_FS[i] = np.round(f(0),decimals=0)
    return z_FS

"""update the nodes based on the positions of the free surface found by ZFS function"""
def Node_Update(z_FS):
    N[0,z_FS[1]]= 3
    N[0,z_FS[1]:] = -1  
    for i in range(1,206):
        if z_FS[i] == z_FS[i+1] and z_FS[i-1]:
            N[i,z_FS[i]] = 24
            N[i,z_FS[i]+1:] = -1
        if z_FS[i] < z_FS[i+1]:
            N[i,z_FS[i]] = 3
            N[i,z_FS[i]+1] =3 
            N[i,z_FS[i]+2:] = -1
    return N

"""re-calculate z_FS values, update nodes, and calculate head until the difference between
free surface calculation is below 1"""
err1 = 1
tol1 = err1 +1
z_FS_old = np.ones_like(z_FS, dtype = int)*100
while err1 < tol1:
    h,iters = GaussSiedel_NoLowerFlux(h,N,1e-2)
    z_FS_new = ZFS_calc(h)
    N = Node_Update(z_FS_new)
    err1 = np.max(np.abs(z_FS_new-z_FS_old))
    z_FS_old = np.copy(z_FS_new)


h[np.where(N==-1)] = np.nan #h doesn't exisit above the free surface
h[np.where(h==-99)]=0



"""plot all head values, the free surface, and calculate flux. Flux is added to the graph with a 
quiver plot. arrows show direction of flow. """
plt.matshow(np.transpose(h),origin='lower')
plt.colorbar()
q_x = np.zeros_like(h)
q_y = np.zeros_like(h)
q_x[1:-1,:] = -k[1:-1,:]*(h[2:,:] - h[0:-2,:])
q_y[:, 1:-1] = -k[:,1:-1]*(h[:,2:] - h[:,0:-2])
Spc = 10
plt.quiver(np.linspace(0, 208, 209)[::Spc], np.linspace(0, 104, 105)[::Spc], np.transpose(q_x[::Spc, ::Spc]), np.transpose(q_y[::Spc, ::Spc]))
